{"version":3,"sources":["../src/google-vertex-provider.ts","../src/google-vertex-language-model.ts","../src/convert-json-schema-to-openapi-schema.ts","../src/convert-to-google-vertex-content-request.ts","../src/google-vertex-prepare-tools.ts","../src/map-google-vertex-finish-reason.ts","../src/google-vertex-embedding-model.ts","../src/google-error.ts"],"sourcesContent":["import {\n  LanguageModelV1,\n  NoSuchModelError,\n  ProviderV1,\n} from '@ai-sdk/provider';\nimport { generateId, loadSetting } from '@ai-sdk/provider-utils';\nimport { VertexAI, VertexInit } from '@google-cloud/vertexai';\nimport { GoogleVertexLanguageModel } from './google-vertex-language-model';\nimport {\n  GoogleVertexModelId,\n  GoogleVertexSettings,\n} from './google-vertex-settings';\nimport {\n  GoogleVertexEmbeddingModelId,\n  GoogleVertexEmbeddingSettings,\n} from './google-vertex-embedding-settings';\nimport { GoogleVertexEmbeddingModel } from './google-vertex-embedding-model';\n\nexport interface GoogleVertexProvider extends ProviderV1 {\n  /**\nCreates a model for text generation.\n   */\n  (\n    modelId: GoogleVertexModelId,\n    settings?: GoogleVertexSettings,\n  ): LanguageModelV1;\n\n  languageModel: (\n    modelId: GoogleVertexModelId,\n    settings?: GoogleVertexSettings,\n  ) => LanguageModelV1;\n}\n\nexport interface GoogleVertexProviderSettings {\n  /**\nYour Google Vertex location. Defaults to the environment variable `GOOGLE_VERTEX_LOCATION`.\n   */\n  location?: string;\n\n  /**\nYour Google Vertex project. Defaults to the environment variable `GOOGLE_VERTEX_PROJECT`.\n  */\n  project?: string;\n\n  /**\n Optional. The Authentication options provided by google-auth-library.\nComplete list of authentication options is documented in the\nGoogleAuthOptions interface:\nhttps://github.com/googleapis/google-auth-library-nodejs/blob/main/src/auth/googleauth.ts.\n   */\n  googleAuthOptions?: VertexInit['googleAuthOptions'];\n\n  // for testing\n  generateId?: () => string;\n\n  // for testing\n  createVertexAI?: ({\n    project,\n    location,\n  }: {\n    project: string;\n    location: string;\n  }) => VertexAI;\n}\n\n/**\nCreate a Google Vertex AI provider instance.\n */\nexport function createVertex(\n  options: GoogleVertexProviderSettings = {},\n): GoogleVertexProvider {\n  const loadVertexProject = () =>\n    loadSetting({\n      settingValue: options.project,\n      settingName: 'project',\n      environmentVariableName: 'GOOGLE_VERTEX_PROJECT',\n      description: 'Google Vertex project',\n    });\n\n  const loadVertexLocation = () =>\n    loadSetting({\n      settingValue: options.location,\n      settingName: 'location',\n      environmentVariableName: 'GOOGLE_VERTEX_LOCATION',\n      description: 'Google Vertex location',\n    });\n\n  const createVertexAI = () => {\n    const config = {\n      project: loadVertexProject(),\n      location: loadVertexLocation(),\n      googleAuthOptions: options.googleAuthOptions,\n    };\n\n    return options.createVertexAI?.(config) ?? new VertexAI(config);\n  };\n\n  const createChatModel = (\n    modelId: GoogleVertexModelId,\n    settings: GoogleVertexSettings = {},\n  ) =>\n    new GoogleVertexLanguageModel(modelId, settings, {\n      vertexAI: createVertexAI(),\n      generateId: options.generateId ?? generateId,\n    });\n\n  const createEmbeddingModel = (\n    modelId: GoogleVertexEmbeddingModelId,\n    settings: GoogleVertexEmbeddingSettings = {},\n  ) => {\n    const vertexAI = createVertexAI();\n\n    return new GoogleVertexEmbeddingModel(modelId, settings, {\n      provider: 'google.vertex',\n      region: loadVertexLocation(),\n      project: loadVertexProject(),\n      generateAuthToken: () => (vertexAI as any).googleAuth.getAccessToken(),\n    });\n  };\n\n  const provider = function (\n    modelId: GoogleVertexModelId,\n    settings?: GoogleVertexSettings,\n  ) {\n    if (new.target) {\n      throw new Error(\n        'The Google Vertex AI model function cannot be called with the new keyword.',\n      );\n    }\n\n    return createChatModel(modelId, settings);\n  };\n\n  provider.languageModel = createChatModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n\n  return provider as GoogleVertexProvider;\n}\n\n/**\nDefault Google Vertex AI provider instance.\n */\nexport const vertex = createVertex();\n","import {\n  LanguageModelV1,\n  LanguageModelV1CallOptions,\n  LanguageModelV1CallWarning,\n  LanguageModelV1FinishReason,\n  LanguageModelV1StreamPart,\n  NoContentGeneratedError,\n} from '@ai-sdk/provider';\nimport { convertAsyncGeneratorToReadableStream } from '@ai-sdk/provider-utils';\nimport {\n  FunctionCallingMode,\n  FunctionDeclarationSchema,\n  GenerateContentResponse,\n  GenerationConfig,\n  Part,\n  ResponseSchema,\n  SafetySetting,\n  VertexAI,\n} from '@google-cloud/vertexai';\nimport { convertJSONSchemaToOpenAPISchema } from './convert-json-schema-to-openapi-schema';\nimport { convertToGoogleVertexContentRequest } from './convert-to-google-vertex-content-request';\nimport { prepareTools } from './google-vertex-prepare-tools';\nimport {\n  GoogleVertexModelId,\n  GoogleVertexSettings,\n} from './google-vertex-settings';\nimport { mapGoogleVertexFinishReason } from './map-google-vertex-finish-reason';\n\ntype GoogleVertexAIConfig = {\n  vertexAI: VertexAI;\n  generateId: () => string;\n};\n\nexport class GoogleVertexLanguageModel implements LanguageModelV1 {\n  readonly specificationVersion = 'v1';\n  readonly provider = 'google-vertex';\n  readonly defaultObjectGenerationMode = 'json';\n  readonly supportsImageUrls = false;\n\n  get supportsObjectGeneration() {\n    return this.settings.structuredOutputs !== false;\n  }\n\n  readonly modelId: GoogleVertexModelId;\n  readonly settings: GoogleVertexSettings;\n\n  private readonly config: GoogleVertexAIConfig;\n\n  constructor(\n    modelId: GoogleVertexModelId,\n    settings: GoogleVertexSettings,\n    config: GoogleVertexAIConfig,\n  ) {\n    this.modelId = modelId;\n    this.settings = settings;\n    this.config = config;\n  }\n\n  private async getArgs({\n    mode,\n    prompt,\n    maxTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    headers,\n  }: LanguageModelV1CallOptions) {\n    const warnings: LanguageModelV1CallWarning[] = [];\n\n    if (presencePenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'presencePenalty',\n      });\n    }\n\n    if (seed != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'seed',\n      });\n    }\n\n    if (headers != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'headers',\n      });\n    }\n\n    const generationConfig: GenerationConfig = {\n      // model specific settings:\n      topK: topK ?? this.settings.topK,\n\n      // standardized settings:\n      maxOutputTokens: maxTokens,\n      frequencyPenalty,\n      temperature,\n      topP,\n      stopSequences,\n\n      // response format:\n      responseMimeType:\n        responseFormat?.type === 'json' ? 'application/json' : undefined,\n      responseSchema:\n        responseFormat?.type === 'json' &&\n        responseFormat.schema != null &&\n        // Google Vertex does not support all OpenAPI Schema features,\n        // so this is needed as an escape hatch:\n        this.supportsObjectGeneration\n          ? (convertJSONSchemaToOpenAPISchema(\n              responseFormat.schema,\n            ) as ResponseSchema)\n          : undefined,\n    };\n\n    const type = mode.type;\n\n    switch (type) {\n      case 'regular': {\n        const { tools, toolConfig, toolWarnings } = prepareTools({\n          mode,\n          useSearchGrounding: this.settings.useSearchGrounding ?? false,\n        });\n\n        const configuration = {\n          model: this.modelId,\n          generationConfig,\n          tools,\n          toolConfig,\n          safetySettings: this.settings.safetySettings as\n            | undefined\n            | Array<SafetySetting>,\n        };\n\n        return {\n          model: this.config.vertexAI.getGenerativeModel(configuration),\n          contentRequest: convertToGoogleVertexContentRequest(prompt),\n          warnings: [...warnings, ...toolWarnings],\n        };\n      }\n\n      case 'object-json': {\n        return {\n          model: this.config.vertexAI.getGenerativeModel({\n            model: this.modelId,\n            generationConfig: {\n              ...generationConfig,\n              responseMimeType: 'application/json',\n              responseSchema:\n                mode.schema != null &&\n                // Google Vertex does not support all OpenAPI Schema features,\n                // so this is needed as an escape hatch:\n                this.supportsObjectGeneration\n                  ? (convertJSONSchemaToOpenAPISchema(\n                      mode.schema,\n                    ) as ResponseSchema)\n                  : undefined,\n            },\n            safetySettings: this.settings.safetySettings as\n              | undefined\n              | Array<SafetySetting>,\n          }),\n          contentRequest: convertToGoogleVertexContentRequest(prompt),\n          warnings,\n        };\n      }\n\n      case 'object-tool': {\n        const configuration = {\n          model: this.modelId,\n          generationConfig,\n          tools: [\n            {\n              functionDeclarations: [\n                {\n                  name: mode.tool.name,\n                  description: mode.tool.description ?? '',\n                  parameters: convertJSONSchemaToOpenAPISchema(\n                    mode.tool.parameters,\n                  ) as FunctionDeclarationSchema,\n                },\n              ],\n            },\n          ],\n          toolConfig: {\n            functionCallingConfig: { mode: FunctionCallingMode.ANY },\n          },\n          safetySettings: this.settings.safetySettings as\n            | undefined\n            | Array<SafetySetting>,\n        };\n\n        return {\n          model: this.config.vertexAI.getGenerativeModel(configuration),\n          contentRequest: convertToGoogleVertexContentRequest(prompt),\n          warnings,\n        };\n      }\n\n      default: {\n        const _exhaustiveCheck: never = type;\n        throw new Error(`Unsupported type: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  supportsUrl(url: URL): boolean {\n    return url.protocol === 'gs:';\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV1['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV1['doGenerate']>>> {\n    const { model, contentRequest, warnings } = await this.getArgs(options);\n    const { response } = await model.generateContent(contentRequest);\n\n    const firstCandidate = response.candidates?.[0];\n\n    if (firstCandidate == null) {\n      throw new NoContentGeneratedError({ message: 'No candidates returned' });\n    }\n\n    const parts = firstCandidate.content.parts;\n    const usageMetadata = response.usageMetadata;\n\n    const toolCalls = getToolCallsFromParts({\n      parts,\n      generateId: this.config.generateId,\n    });\n\n    return {\n      text: getTextFromParts(parts),\n      toolCalls,\n      finishReason: mapGoogleVertexFinishReason({\n        finishReason: firstCandidate.finishReason,\n        hasToolCalls: toolCalls != null && toolCalls.length > 0,\n      }),\n      usage: {\n        promptTokens: usageMetadata?.promptTokenCount ?? NaN,\n        completionTokens: usageMetadata?.candidatesTokenCount ?? NaN,\n      },\n      rawCall: {\n        rawPrompt: contentRequest,\n        rawSettings: {},\n      },\n      providerMetadata: this.settings.useSearchGrounding\n        ? {\n            vertex: {\n              groundingMetadata: firstCandidate.groundingMetadata as any,\n            },\n          }\n        : undefined,\n      warnings,\n    };\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV1['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV1['doStream']>>> {\n    const { model, contentRequest, warnings } = await this.getArgs(options);\n    const { stream } = await model.generateContentStream(contentRequest);\n\n    let finishReason: LanguageModelV1FinishReason = 'unknown';\n    let usage: { promptTokens: number; completionTokens: number } = {\n      promptTokens: Number.NaN,\n      completionTokens: Number.NaN,\n    };\n\n    const generateId = this.config.generateId;\n    let hasToolCalls = false;\n    let providerMetadata: { vertex: { groundingMetadata: any } } | undefined;\n\n    return {\n      stream: convertAsyncGeneratorToReadableStream(stream).pipeThrough(\n        new TransformStream<GenerateContentResponse, LanguageModelV1StreamPart>(\n          {\n            transform(chunk, controller) {\n              const usageMetadata = chunk.usageMetadata;\n              if (usageMetadata != null) {\n                usage = {\n                  promptTokens: usageMetadata.promptTokenCount ?? NaN,\n                  completionTokens: usageMetadata.candidatesTokenCount ?? NaN,\n                };\n              }\n\n              const candidate = chunk.candidates?.[0];\n\n              if (candidate == null) {\n                return; // ignored (this can happen when using grounding)\n              }\n\n              if (candidate.finishReason != null) {\n                finishReason = mapGoogleVertexFinishReason({\n                  finishReason: candidate.finishReason,\n                  hasToolCalls,\n                });\n              }\n\n              if (candidate.groundingMetadata != null) {\n                providerMetadata = {\n                  vertex: {\n                    groundingMetadata: candidate.groundingMetadata as any,\n                  },\n                };\n              }\n\n              const content = candidate.content;\n\n              const deltaText = getTextFromParts(content.parts);\n              if (deltaText != null) {\n                controller.enqueue({\n                  type: 'text-delta',\n                  textDelta: deltaText,\n                });\n              }\n\n              const toolCallDeltas = getToolCallsFromParts({\n                parts: content.parts,\n                generateId,\n              });\n\n              if (toolCallDeltas != null) {\n                for (const toolCall of toolCallDeltas) {\n                  controller.enqueue({\n                    type: 'tool-call-delta',\n                    toolCallType: 'function',\n                    toolCallId: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    argsTextDelta: toolCall.args,\n                  });\n\n                  controller.enqueue({\n                    type: 'tool-call',\n                    toolCallType: 'function',\n                    toolCallId: toolCall.toolCallId,\n                    toolName: toolCall.toolName,\n                    args: toolCall.args,\n                  });\n\n                  hasToolCalls = true;\n                }\n              }\n            },\n\n            flush(controller) {\n              controller.enqueue({\n                type: 'finish',\n                finishReason,\n                usage,\n                providerMetadata,\n              });\n            },\n          },\n        ),\n      ),\n      rawCall: {\n        rawPrompt: contentRequest,\n        rawSettings: {},\n      },\n      warnings,\n    };\n  }\n}\n\nfunction getToolCallsFromParts({\n  parts,\n  generateId,\n}: {\n  parts: Part[];\n  generateId: () => string;\n}) {\n  if (parts == null) {\n    return undefined; // parts are sometimes undefined when using safety settings\n  }\n\n  return parts.flatMap(part =>\n    part.functionCall == null\n      ? []\n      : {\n          toolCallType: 'function' as const,\n          toolCallId: generateId(),\n          toolName: part.functionCall.name,\n          args: JSON.stringify(part.functionCall.args),\n        },\n  );\n}\n\nfunction getTextFromParts(parts: Part[] | undefined) {\n  if (parts == null) {\n    return undefined; // parts are sometimes undefined when using safety settings\n  }\n\n  const textParts = parts.filter(part => 'text' in part) as Array<\n    Part & { text: string }\n  >;\n\n  return textParts.length === 0\n    ? undefined\n    : textParts.map(part => part.text).join('');\n}\n","import { JSONSchema7Definition } from '@ai-sdk/provider';\n\n/**\n * Converts JSON Schema 7 to OpenAPI Schema 3.0\n */\nexport function convertJSONSchemaToOpenAPISchema(\n  jsonSchema: JSONSchema7Definition,\n): unknown {\n  if (typeof jsonSchema === 'boolean') {\n    return { type: 'boolean', properties: {} };\n  }\n\n  const {\n    type,\n    description,\n    required,\n    properties,\n    items,\n    allOf,\n    anyOf,\n    oneOf,\n    format,\n    const: constValue,\n    minLength,\n  } = jsonSchema;\n\n  const result: Record<string, unknown> = {};\n\n  if (description) result.description = description;\n  if (required) result.required = required;\n  if (format) result.format = format;\n\n  if (constValue !== undefined) {\n    result.enum = [constValue];\n  }\n\n  // Handle type\n  if (type) {\n    if (Array.isArray(type)) {\n      if (type.includes('null')) {\n        result.type = type.filter(t => t !== 'null')[0];\n        result.nullable = true;\n      } else {\n        result.type = type;\n      }\n    } else if (type === 'null') {\n      result.type = 'null';\n    } else {\n      result.type = type;\n    }\n  }\n\n  if (properties) {\n    result.properties = Object.entries(properties).reduce(\n      (acc, [key, value]) => {\n        acc[key] = convertJSONSchemaToOpenAPISchema(value);\n        return acc;\n      },\n      {} as Record<string, unknown>,\n    );\n  }\n\n  if (items) {\n    result.items = Array.isArray(items)\n      ? items.map(convertJSONSchemaToOpenAPISchema)\n      : convertJSONSchemaToOpenAPISchema(items);\n  }\n\n  if (allOf) {\n    result.allOf = allOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n  if (anyOf) {\n    result.anyOf = anyOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n  if (oneOf) {\n    result.oneOf = oneOf.map(convertJSONSchemaToOpenAPISchema);\n  }\n\n  if (minLength !== undefined) result.minLength = minLength;\n\n  return result;\n}\n","import {\n  LanguageModelV1Prompt,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { convertUint8ArrayToBase64 } from '@ai-sdk/provider-utils';\nimport { Content, GenerateContentRequest, Part } from '@google-cloud/vertexai';\n\nexport function convertToGoogleVertexContentRequest(\n  prompt: LanguageModelV1Prompt,\n): GenerateContentRequest {\n  const systemInstructionParts: Part[] = [];\n  const contents: Content[] = [];\n  let systemMessagesAllowed = true;\n\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case 'system': {\n        if (!systemMessagesAllowed) {\n          throw new UnsupportedFunctionalityError({\n            functionality: 'system messages after first user message',\n          });\n        }\n        systemInstructionParts.push({ text: content });\n        break;\n      }\n\n      case 'user': {\n        systemMessagesAllowed = false;\n\n        const parts: Content['parts'] = [];\n\n        for (const part of content) {\n          switch (part.type) {\n            case 'text': {\n              parts.push({ text: part.text });\n              break;\n            }\n\n            case 'image': {\n              parts.push(\n                part.image instanceof URL\n                  ? {\n                      fileData: {\n                        mimeType: part.mimeType ?? 'image/jpeg',\n                        fileUri: part.image.toString(),\n                      },\n                    }\n                  : {\n                      inlineData: {\n                        mimeType: part.mimeType ?? 'image/jpeg',\n                        data: convertUint8ArrayToBase64(part.image),\n                      },\n                    },\n              );\n\n              break;\n            }\n\n            case 'file': {\n              parts.push(\n                part.data instanceof URL\n                  ? {\n                      fileData: {\n                        mimeType: part.mimeType,\n                        fileUri: part.data.toString(),\n                      },\n                    }\n                  : {\n                      inlineData: {\n                        mimeType: part.mimeType,\n                        data: part.data,\n                      },\n                    },\n              );\n\n              break;\n            }\n\n            default: {\n              const _exhaustiveCheck: never = part;\n              throw new UnsupportedFunctionalityError({\n                functionality: `prompt part: ${_exhaustiveCheck}`,\n              });\n            }\n          }\n        }\n\n        contents.push({ role: 'user', parts });\n        break;\n      }\n\n      case 'assistant': {\n        systemMessagesAllowed = false;\n\n        contents.push({\n          role: 'assistant',\n          parts: content\n            .filter(part => part.type !== 'text' || part.text.length > 0)\n            .map(part => {\n              switch (part.type) {\n                case 'text': {\n                  return { text: part.text };\n                }\n\n                case 'tool-call': {\n                  return {\n                    functionCall: {\n                      name: part.toolName,\n                      args: part.args as object,\n                    },\n                  };\n                }\n\n                default: {\n                  const _exhaustiveCheck: never = part;\n                  throw new UnsupportedFunctionalityError({\n                    functionality: `prompt part: ${_exhaustiveCheck}`,\n                  });\n                }\n              }\n            }),\n        });\n\n        break;\n      }\n\n      case 'tool': {\n        systemMessagesAllowed = false;\n\n        contents.push({\n          role: 'user',\n          parts: content.map(part => ({\n            functionResponse: {\n              name: part.toolName,\n              response: part.result as object,\n            },\n          })),\n        });\n        break;\n      }\n\n      default: {\n        const _exhaustiveCheck: never = role;\n        throw new UnsupportedFunctionalityError({\n          functionality: `role: ${_exhaustiveCheck}`,\n        });\n      }\n    }\n  }\n\n  return {\n    systemInstruction:\n      systemInstructionParts.length > 0\n        ? { role: 'system', parts: systemInstructionParts }\n        : undefined,\n    contents,\n  };\n}\n","import { LanguageModelV1, LanguageModelV1CallWarning } from '@ai-sdk/provider';\nimport {\n  FunctionCallingMode,\n  FunctionDeclaration,\n  FunctionDeclarationSchema,\n  Tool,\n  ToolConfig,\n} from '@google-cloud/vertexai';\nimport { convertJSONSchemaToOpenAPISchema } from './convert-json-schema-to-openapi-schema';\n\nexport function prepareTools({\n  useSearchGrounding,\n  mode,\n}: {\n  useSearchGrounding: boolean;\n  mode: Parameters<LanguageModelV1['doGenerate']>[0]['mode'] & {\n    type: 'regular';\n  };\n}): {\n  tools: Tool[] | undefined;\n  toolConfig: ToolConfig | undefined;\n  toolWarnings: LanguageModelV1CallWarning[];\n} {\n  // when the tools array is empty, change it to undefined to prevent errors:\n  const tools = mode.tools?.length ? mode.tools : undefined;\n\n  const toolWarnings: LanguageModelV1CallWarning[] = [];\n\n  const vertexTools: Tool[] = [];\n\n  if (tools != null) {\n    const functionDeclarations: FunctionDeclaration[] = [];\n\n    for (const tool of tools) {\n      if (tool.type === 'provider-defined') {\n        toolWarnings.push({ type: 'unsupported-tool', tool });\n      } else {\n        functionDeclarations.push({\n          name: tool.name,\n          description: tool.description ?? '',\n          parameters: convertJSONSchemaToOpenAPISchema(\n            tool.parameters,\n          ) as FunctionDeclarationSchema,\n        });\n      }\n    }\n\n    vertexTools.push({ functionDeclarations });\n  }\n\n  if (useSearchGrounding) {\n    vertexTools.push({ googleSearchRetrieval: {} });\n  }\n\n  const finalTools = vertexTools.length > 0 ? vertexTools : undefined;\n\n  const toolChoice = mode.toolChoice;\n\n  if (toolChoice == null) {\n    return {\n      tools: finalTools,\n      toolConfig: undefined,\n      toolWarnings,\n    };\n  }\n\n  const type = toolChoice.type;\n\n  switch (type) {\n    case 'auto':\n      return {\n        tools: finalTools,\n        toolConfig: {\n          functionCallingConfig: { mode: FunctionCallingMode.AUTO },\n        },\n        toolWarnings,\n      };\n    case 'none':\n      return {\n        tools: finalTools,\n        toolConfig: {\n          functionCallingConfig: { mode: FunctionCallingMode.NONE },\n        },\n        toolWarnings,\n      };\n    case 'required':\n      return {\n        tools: finalTools,\n        toolConfig: {\n          functionCallingConfig: { mode: FunctionCallingMode.ANY },\n        },\n        toolWarnings,\n      };\n    case 'tool':\n      return {\n        tools: finalTools,\n        toolConfig: {\n          functionCallingConfig: {\n            mode: FunctionCallingMode.ANY,\n            allowedFunctionNames: [toolChoice.toolName],\n          },\n        },\n        toolWarnings,\n      };\n    default: {\n      const _exhaustiveCheck: never = type;\n      throw new Error(`Unsupported tool choice type: ${_exhaustiveCheck}`);\n    }\n  }\n}\n","import { LanguageModelV1FinishReason } from '@ai-sdk/provider';\nimport { FinishReason } from '@google-cloud/vertexai';\n\nexport function mapGoogleVertexFinishReason({\n  finishReason,\n  hasToolCalls,\n}: {\n  finishReason: FinishReason | undefined;\n  hasToolCalls: boolean;\n}): LanguageModelV1FinishReason {\n  switch (finishReason) {\n    case 'STOP':\n      return hasToolCalls ? 'tool-calls' : 'stop';\n    case 'MAX_TOKENS':\n      return 'length';\n    case 'BLOCKLIST':\n    case 'PROHIBITED_CONTENT':\n    case 'SPII':\n    case 'RECITATION':\n    case 'SAFETY':\n      return 'content-filter';\n    case 'FINISH_REASON_UNSPECIFIED':\n    case 'OTHER':\n      return 'other';\n    default:\n      return 'unknown';\n  }\n}\n","import {\n  EmbeddingModelV1,\n  TooManyEmbeddingValuesForCallError,\n} from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createJsonResponseHandler,\n  postJsonToApi,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod';\nimport { googleFailedResponseHandler } from './google-error';\nimport {\n  GoogleVertexEmbeddingModelId,\n  GoogleVertexEmbeddingSettings,\n} from './google-vertex-embedding-settings';\n\ntype GoogleVertexEmbeddingConfig = {\n  provider: string;\n  region: string;\n  project: string;\n  generateAuthToken: () => Promise<string | null | undefined>;\n};\n\nexport class GoogleVertexEmbeddingModel implements EmbeddingModelV1<string> {\n  readonly specificationVersion = 'v1';\n  readonly modelId: GoogleVertexEmbeddingModelId;\n\n  private readonly config: GoogleVertexEmbeddingConfig;\n  private readonly settings: GoogleVertexEmbeddingSettings;\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  get maxEmbeddingsPerCall(): number {\n    return 2048;\n  }\n\n  get supportsParallelCalls(): boolean {\n    return true;\n  }\n\n  constructor(\n    modelId: GoogleVertexEmbeddingModelId,\n    settings: GoogleVertexEmbeddingSettings,\n    config: GoogleVertexEmbeddingConfig,\n  ) {\n    this.modelId = modelId;\n    this.settings = settings;\n    this.config = config;\n  }\n\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n  }: Parameters<EmbeddingModelV1<string>['doEmbed']>[0]): Promise<\n    Awaited<ReturnType<EmbeddingModelV1<string>['doEmbed']>>\n  > {\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values,\n      });\n    }\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      url:\n        `https://${this.config.region}-aiplatform.googleapis.com/v1/` +\n        `projects/${this.config.project}/locations/${this.config.region}/` +\n        `publishers/google/models/${this.modelId}:predict`,\n      headers: combineHeaders(\n        { Authorization: `Bearer ${await this.config.generateAuthToken()}` },\n        headers,\n      ),\n      body: {\n        instances: values.map(value => ({ content: value })),\n        parameters: {\n          outputDimensionality: this.settings.outputDimensionality,\n        },\n      },\n      failedResponseHandler: googleFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        googleVertexTextEmbeddingResponseSchema,\n      ),\n      abortSignal,\n    });\n\n    return {\n      embeddings: response.predictions.map(\n        prediction => prediction.embeddings.values,\n      ),\n      usage: {\n        tokens: response.predictions.reduce(\n          (tokenCount, prediction) =>\n            tokenCount + prediction.embeddings.statistics.token_count,\n          0,\n        ),\n      },\n      rawResponse: { headers: responseHeaders },\n    };\n  }\n}\n\n// minimal version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst googleVertexTextEmbeddingResponseSchema = z.object({\n  predictions: z.array(\n    z.object({\n      embeddings: z.object({\n        values: z.array(z.number()),\n        statistics: z.object({\n          token_count: z.number(),\n        }),\n      }),\n    }),\n  ),\n});\n","import { createJsonErrorResponseHandler } from '@ai-sdk/provider-utils';\nimport { z } from 'zod';\n\nconst googleErrorDataSchema = z.object({\n  error: z.object({\n    code: z.number().nullable(),\n    message: z.string(),\n    status: z.string(),\n  }),\n});\n\nexport type GoogleErrorData = z.infer<typeof googleErrorDataSchema>;\n\nexport const googleFailedResponseHandler = createJsonErrorResponseHandler({\n  errorSchema: googleErrorDataSchema,\n  errorToMessage: data => data.error.message,\n});\n"],"mappings":"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","names":["VertexAI","FunctionCallingMode","FunctionCallingMode","generateId","z","z","VertexAI"]}